grammar                         := (spacing definition)*
node                            := identifier assigns expression end_of_line
definition                      := identifier equals expression end_of_line
identifier                       = /[a-zA-Z_][a-zA-Z0-9]*/ spacing
assigns                          = `":=" spacing
equals                           = `"=" spacing
expression                       = alternatives | sequences
sequences                       := (elements spacing)+
alternatives                    := elements (slash elements)+
slash                            = `"/" spacing
elements                         = prefixed | suffixed | element
prefixed                         = negative_look_ahead | positive_look_ahead | ignored
suffixed                         = optional_element | any_number_of | one_or_more
negative_look_ahead             := `"!" element
positive_look_ahead             := `"&" element
ignored                         := `"`" element
optional_element                := element `"?"
any_number_of                   := element `"*"
one_or_more                     := element `"+"
element                          = bracketed_expression | identifier | terminal_string | terminal_regexp | any_character
bracketed_expression            := `"(" spacing expression `")" spacing
terminal_string                 := (`'"' /[^"]*/ `'"' spacing) | (`"'" /[^"]*/ `"'" spacing)
terminal_character_range        := /\[[a-zA-Z\-0-9]*\]/ spacing
terminal_regexp                 := `'/' /(\\\/|[^\x2f])*/ `'/' spacing
any_character                   := `'.'
end_of_line                      = `/[\n\r]+/
spacing                          = `/[ \t]*/


