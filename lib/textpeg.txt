text_peg                        := (spacing (node | definition))*
node                            := identifier assigns expression end_of_line
definition                      := identifier equals expression end_of_line
identifier                      := /[a-zA-Z_][a-zA-Z0-9_]*/ spacing
assigns                          = `":=" spacing
equals                           = `"=" spacing
expression                       = alternatives | sequence
sequence                        := (elements spacing)+
alternatives                    := elements (divider elements)+
divider                          = `"|" spacing
elements                         = prefixed | suffixed | element
prefixed                         = ignored | not_followed_by | followed_by | 
suffixed                         = optional | any_number_of | one_or_more
not_followed_by                 := `"!" element
followed_by                     := `"&" element
ignored                         := `"`" element
optional                        := element `"?"
any_number_of                   := element `"*"
one_or_more                     := element `"+"
element                          = bracketed_expression | identifier | terminal_string | terminal_regexp | terminal_character_range | any_character
bracketed_expression            := `"(" spacing expression `")" spacing
terminal_string                 := single_quoted_string | double_quoted_string
double_quoted_string             = `'"' /[^"]*/ `'"' spacing
single_quoted_string             = `"'" /[^']*/ `"'" spacing
terminal_character_range        := /\[[a-zA-Z\-0-9]*\]/ spacing
terminal_regexp                 := `'/' /(\\\/|[^\x2f])*/ `'/' spacing
any_character                   := `'.' spacing
end_of_line                      = `/[\n\r]+|\z/
spacing                          = `/[ \t]*/
